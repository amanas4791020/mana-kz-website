import { useState, useEffect } from 'react'
import { Calendar, Clock, User, Phone, CreditCard, CheckCircle } from 'lucide-react'

interface TimeSlot {
  time: string
  available: boolean
  price?: number
}

interface BookingData {
  name: string
  phone: string
  email: string
  service: string
  date: Date | null
  timeSlot: string
  duration: number
  totalPrice: number
  notes: string
}

const SERVICE_TYPES = [
  {
    id: 'plumbing_basic',
    name: '–ë–∞–∑–æ–≤–∞—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
    duration: 60,
    price: 8000,
    description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª–µ–π, –º–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç'
  },
  {
    id: 'plumbing_complex',
    name: '–°–ª–æ–∂–Ω–∞—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
    duration: 120,
    price: 15000,
    description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏, —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥—ã'
  },
  {
    id: 'electrical_basic',
    name: '–ë–∞–∑–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–∏–∫–∞',
    duration: 60,
    price: 7000,
    description: '–†–æ–∑–µ—Ç–∫–∏, –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏, –ª–∞–º–ø—ã'
  },
  {
    id: 'electrical_complex',
    name: '–°–ª–æ–∂–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–∏–∫–∞',
    duration: 180,
    price: 20000,
    description: '–ü—Ä–æ–≤–æ–¥–∫–∞, —â–∏—Ç—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ'
  },
  {
    id: 'furniture',
    name: '–°–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏',
    duration: 120,
    price: 12000,
    description: '–®–∫–∞—Ñ—ã, –∫–æ–º–æ–¥—ã, –∫—Ä–æ–≤–∞—Ç–∏'
  },
  {
    id: 'handyman',
    name: '–ú—É–∂ –Ω–∞ —á–∞—Å',
    duration: 60,
    price: 5000,
    description: '–ú–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤'
  }
]

const TIME_SLOTS = [
  '08:00', '09:00', '10:00', '11:00', '12:00', '13:00',
  '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'
]

export function OnlineBooking() {
  const [currentStep, setCurrentStep] = useState(1)
  const [bookingData, setBookingData] = useState<BookingData>({
    name: '',
    phone: '',
    email: '',
    service: '',
    date: null,
    timeSlot: '',
    duration: 60,
    totalPrice: 0,
    notes: ''
  })
  
  const [availableSlots, setAvailableSlots] = useState<TimeSlot[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState<{ [key: string]: string }>({})
  const [isBookingConfirmed, setIsBookingConfirmed] = useState(false)

  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
  const BOOKED_SLOTS: { [key: string]: string[] } = {
    [new Date().toDateString()]: ['10:00', '14:00', '16:00'],
    [new Date(Date.now() + 86400000).toDateString()]: ['09:00', '13:00', '18:00']
  }

  const generateTimeSlots = (selectedDate: Date, serviceDuration: number) => {
    const dateString = selectedDate.toDateString()
    const bookedSlots = BOOKED_SLOTS[dateString] || []
    
    return TIME_SLOTS.map(time => ({
      time,
      available: !bookedSlots.includes(time)
    }))
  }

  useEffect(() => {
    if (bookingData.date && bookingData.duration) {
      const slots = generateTimeSlots(bookingData.date, bookingData.duration)
      setAvailableSlots(slots)
    }
  }, [bookingData.date, bookingData.duration])

  const handleInputChange = (field: keyof BookingData, value: any) => {
    setBookingData(prev => ({ ...prev, [field]: value }))
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏
    if (field === 'service') {
      const service = SERVICE_TYPES.find(s => s.id === value)
      if (service) {
        setBookingData(prev => ({
          ...prev,
          duration: service.duration,
          totalPrice: service.price
        }))
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  const validateStep = (step: number): boolean => {
    const newErrors: { [key: string]: string } = {}
    
    if (step === 1) {
      if (!bookingData.name.trim()) newErrors.name = '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
      if (!bookingData.phone.trim()) newErrors.phone = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      if (!bookingData.service) newErrors.service = '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É'
    }
    
    if (step === 2) {
      if (!bookingData.date) newErrors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'
      if (!bookingData.timeSlot) newErrors.timeSlot = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è'
    }
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleNextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => prev + 1)
    }
  }

  const handlePrevStep = () => {
    setCurrentStep(prev => prev - 1)
  }

  const handleBookingSubmit = async () => {
    if (!validateStep(2)) return
    
    setIsLoading(true)
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await new Promise(resolve => setTimeout(resolve, 2000)) // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      
      setIsBookingConfirmed(true)
      setCurrentStep(4)
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsLoading(false)
    }
  }

  const generateWhatsAppBookingMessage = () => {
    const service = SERVICE_TYPES.find(s => s.id === bookingData.service)
    const date = bookingData.date?.toLocaleDateString('ru-RU')
    
    return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª –±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É:

` +
           `üë§ –ò–º—è: ${bookingData.name}
` +
           `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.phone}
` +
           `üîß –£—Å–ª—É–≥–∞: ${service?.name}
` +
           `üìÖ –î–∞—Ç–∞: ${date}
` +
           `‚è∞ –í—Ä–µ–º—è: ${bookingData.timeSlot}
` +
           `‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${bookingData.duration} –º–∏–Ω
` +
           `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${bookingData.totalPrice.toLocaleString()} ‚Ç∏
` +
           `${bookingData.notes ? `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${bookingData.notes}` : ''}`
  }

  if (isBookingConfirmed) {
    return (
      <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md mx-auto">
        <CheckCircle className="w-16 h-16 text-green-600 mx-auto mb-4" />
        <h2 className="text-2xl font-bold text-gray-900 mb-4">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</h2>
        <p className="text-gray-600 mb-6">
          –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π.
        </p>
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <h3 className="font-semibold mb-2">–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
          <div className="text-sm space-y-1">
            <div><strong>–£—Å–ª—É–≥–∞:</strong> {SERVICE_TYPES.find(s => s.id === bookingData.service)?.name}</div>
            <div><strong>–î–∞—Ç–∞:</strong> {bookingData.date?.toLocaleDateString('ru-RU')}</div>
            <div><strong>–í—Ä–µ–º—è:</strong> {bookingData.timeSlot}</div>
            <div><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {bookingData.totalPrice.toLocaleString()} ‚Ç∏</div>
          </div>
        </div>
        <button
          onClick={() => {
            setIsBookingConfirmed(false)
            setCurrentStep(1)
            setBookingData({
              name: '',
              phone: '',
              email: '',
              service: '',
              date: null,
              timeSlot: '',
              duration: 60,
              totalPrice: 0,
              notes: ''
            })
          }}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium"
        >
          –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        </button>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-xl shadow-lg max-w-2xl mx-auto">
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="px-6 pt-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
              currentStep >= 1 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'
            }`}>
              1
            </div>
            <div className={`h-1 w-16 ${
              currentStep > 1 ? 'bg-blue-600' : 'bg-gray-200'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
              currentStep >= 2 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'
            }`}>
              2
            </div>
            <div className={`h-1 w-16 ${
              currentStep > 2 ? 'bg-blue-600' : 'bg-gray-200'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
              currentStep >= 3 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'
            }`}>
              3
            </div>
          </div>
        </div>
      </div>

      <div className="p-6">
        {/* –®–∞–≥ 1: –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —É—Å–ª—É–≥–∞ */}
        {currentStep === 1 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —É—Å–ª—É–≥–∞</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <User className="w-4 h-4 inline mr-1" />
                  –í–∞—à–µ –∏–º—è *
                </label>
                <input
                  type="text"
                  className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.name ? 'border-red-500' : 'border-gray-300'
                  }`}
                  value={bookingData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
                />
                {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Phone className="w-4 h-4 inline mr-1" />
                  –¢–µ–ª–µ—Ñ–æ–Ω *
                </label>
                <input
                  type="tel"
                  className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.phone ? 'border-red-500' : 'border-gray-300'
                  }`}
                  value={bookingData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  placeholder="+7 (___)  ___-__-__"
                />
                {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </label>
              <input
                type="email"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={bookingData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="your@email.com"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-4">
                –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É *
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {SERVICE_TYPES.map(service => (
                  <label key={service.id} className={`cursor-pointer border-2 rounded-lg p-4 transition-all ${
                    bookingData.service === service.id 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}>
                    <input
                      type="radio"
                      name="service"
                      value={service.id}
                      checked={bookingData.service === service.id}
                      onChange={(e) => handleInputChange('service', e.target.value)}
                      className="sr-only"
                    />
                    <div className="space-y-2">
                      <h3 className="font-semibold text-gray-900">{service.name}</h3>
                      <p className="text-sm text-gray-600">{service.description}</p>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-500">
                          <Clock className="w-4 h-4 inline mr-1" />
                          {service.duration} –º–∏–Ω
                        </span>
                        <span className="font-semibold text-blue-600">
                          {service.price.toLocaleString()} ‚Ç∏
                        </span>
                      </div>
                    </div>
                  </label>
                ))}
              </div>
              {errors.service && <p className="text-red-500 text-sm mt-1">{errors.service}</p>}
            </div>
          </div>
        )}

        {/* –®–∞–≥ 2: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Calendar className="w-4 h-4 inline mr-1" />
                  –î–∞—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è *
                </label>
                <input
                  type="date"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  value={bookingData.date ? bookingData.date.toISOString().split('T')[0] : ''}
                  onChange={(e) => handleInputChange('date', e.target.value ? new Date(e.target.value) : null)}
                  min={new Date().toISOString().split('T')[0]}
                  max={new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
                />
                {errors.date && <p className="text-red-500 text-sm mt-1">{errors.date}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Clock className="w-4 h-4 inline mr-1" />
                  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ *
                </label>
                {bookingData.date ? (
                  <div className="grid grid-cols-3 gap-2 max-h-48 overflow-y-auto">
                    {availableSlots.map(slot => (
                      <button
                        key={slot.time}
                        type="button"
                        disabled={!slot.available}
                        className={`p-2 text-sm rounded border transition-all ${
                          bookingData.timeSlot === slot.time
                            ? 'bg-blue-600 text-white border-blue-600'
                            : slot.available
                              ? 'border-gray-300 hover:border-blue-500 hover:bg-blue-50'
                              : 'border-gray-200 bg-gray-100 text-gray-400 cursor-not-allowed'
                        }`}
                        onClick={() => handleInputChange('timeSlot', slot.time)}
                      >
                        {slot.time}
                        {!slot.available && (
                          <div className="text-xs">–ó–∞–Ω—è—Ç–æ</div>
                        )}
                      </button>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500 text-sm p-4 border border-gray-200 rounded-lg">
                    –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É
                  </div>
                )}
                {errors.timeSlot && <p className="text-red-500 text-sm mt-1">{errors.timeSlot}</p>}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
              </label>
              <textarea
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-20"
                value={bookingData.notes}
                onChange={(e) => handleInputChange('notes', e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
              />
            </div>
          </div>
        )}

        {/* –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ */}
        {currentStep === 3 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
            
            <div className="bg-gray-50 rounded-lg p-6">
              <h3 className="font-semibold text-lg mb-4">–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
              
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="font-medium">–ö–ª–∏–µ–Ω—Ç:</span>
                  <span>{bookingData.name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                  <span>{bookingData.phone}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">–£—Å–ª—É–≥–∞:</span>
                  <span>{SERVICE_TYPES.find(s => s.id === bookingData.service)?.name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">–î–∞—Ç–∞:</span>
                  <span>{bookingData.date?.toLocaleDateString('ru-RU')}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">–í—Ä–µ–º—è:</span>
                  <span>{bookingData.timeSlot}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span>{bookingData.duration} –º–∏–Ω</span>
                </div>
                <hr className="my-3" />
                <div className="flex justify-between text-lg font-semibold">
                  <span>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className="text-blue-600">{bookingData.totalPrice.toLocaleString()} ‚Ç∏</span>
                </div>
              </div>
              
              {bookingData.notes && (
                <div className="mt-4 pt-4 border-t">
                  <span className="font-medium">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</span>
                  <p className="text-gray-600 mt-1">{bookingData.notes}</p>
                </div>
              )}
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-sm text-yellow-800">
                <strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç. –ú–∞—Å—Ç–µ—Ä —Å–æ–æ–±—â–∏—Ç —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞.
              </p>
            </div>

            <div className="flex space-x-4">
              <button
                onClick={handleBookingSubmit}
                disabled={isLoading}
                className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center justify-center"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    –û–±—Ä–∞–±–æ—Ç–∫–∞...
                  </>
                ) : (
                  <>
                    <CreditCard className="w-5 h-5 mr-2" />
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </>
                )}
              </button>
              
              <a
                href={`https://wa.me/77771234567?text=${encodeURIComponent(generateWhatsAppBookingMessage())}`}
                target="_blank"
                rel="noopener noreferrer"
                className="flex-1 bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors text-center flex items-center justify-center"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
              </a>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="flex justify-between mt-8">
          {currentStep > 1 && (
            <button
              onClick={handlePrevStep}
              className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
            >
              –ù–∞–∑–∞–¥
            </button>
          )}
          
          {currentStep < 3 && (
            <button
              onClick={handleNextStep}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 ml-auto"
            >
              –î–∞–ª–µ–µ
            </button>
          )}
        </div>
      </div>
    </div>
  )
}